root /packages:AgileXS/packages:Domain/packages

import Metaphor.PIM.Archetypes.CrmArchetype
import Metaphor.PIM.Domain.Attribute
import Metaphor.PIM.Domain.Class
import Metaphor.PIM.Domain.Enumeration
import Metaphor.PIM.Domain.Literal
import Metaphor.PIM.Domain.Operation
import Metaphor.PIM.Domain.Package
import Metaphor.PIM.Domain.Parameter

path primitive=/packages:Metaphor/packages:PIM/packages:Domain/types
path catalog=/packages:AgileXS/packages:Domain/packages:Catalog/types
path shop=/packages:AgileXS/packages:Domain/packages:Shop/types

Package {
    name = Catalog
    types = {
        Class {
            name = Catalog
            attributes = {
                Attribute {
                    name = name
                    type = primitive:String
                }
                Attribute {
                    name = items
                    type = catalog:Item
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = catalog:Item/attributes:catalog
                }
                Attribute {
                    name = shops
                    type = shop:Shop
                    lower = 0
                    upper = {}
                    opposite = shop:Shop/attributes:catalog
                }
                Attribute {
                    name = templates
                    type = catalog:Template
                    lower = 0
                    upper = {}
                }
            }
        }
        Class {
            name = Item
            attributes = {
                Attribute {
                    name = catalog
                    type = catalog:Catalog
                    opposite = catalog:Catalog/attributes:items
                }
                Attribute {
                    name = parents
                    type = catalog:ProductGroup
                    lower = 0
                    upper = {}
                    opposite = catalog:ProductGroup/attributes:children
                }
                /**
                 * Defines the properties that a product in the child-extent
                 * can have. This includes this item, if it is a product.
                 */
                Attribute {
                    name = properties
                    type = catalog:Property
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = catalog:Property/attributes:item
                }
                Attribute {
                    name = propertyValues
                    type = catalog:PropertyValue
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = catalog:PropertyValue/attributes:item
                }
                Attribute {
                    name = relations
                    type = catalog:Relation
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = catalog:Relation/attributes:item
                }
                Attribute {
                    name = templates
                    type = catalog:Template
                    lower = 0
                    upper = {}
                    isComposite = true
                    opposite = catalog:Template/attributes:item
                }
            }
        }
        Class {
            name = ProductGroup
            superClass = catalog:Item
            attributes = {
                Attribute {
                    name = children
                    type = catalog:Item
                    lower = 0
                    upper = {}
                    opposite = catalog:Item/attributes:parents
                }
                Attribute {
                    name = containsProducts
                    type = primitive:Boolean
                    default = true
                }
            }
        }
        Class {
            name = Product
            superClass = catalog:Item
            attributes = {
                Attribute {
                    name = templates
                    type = catalog:Template
                    lower = 0
                    upper = {}
                }
            }
        }
        /** 
         * Used to qualify a relation between two related products, e.g. Supply, SparePart
         */
        Class {
            name = Relation
            attributes = {
                Attribute {
                    name = item
                    type = catalog:Item
                    opposite = catalog:Item/attributes:relations
                }
                Attribute {
                    name = relatedTo
                    type = catalog:Item
                }
                Attribute {
                    name = relationType
                    type = catalog:RelationType
                }
            }
        }
        Class {
            name = RelationType
            attributes = {
                Attribute {
                    name = name
                    type = primitive:String
                }
            }
        }

        Class {
            name = Property
            attributes = {
                Attribute {
                    name = labels
                    type = catalog:Label
                    isComposite = true
                    lower = 0
                    upper = {}
                    opposite = catalog:Label/attributes:property
                }
                Attribute {
                    name = productGroupProperty
                    type = primitive:Boolean
                    default = false
                }

                Attribute {
                    name = item
                    type = catalog:Item
                    lower = 0
                    opposite = catalog:Item/attributes:properties
                }
                Attribute {
                    name = type
                    type = catalog:PropertyType
                }
                Attribute {
                    name = enumValues
                    type = catalog:EnumValue
                    isComposite = true
                    lower = 1
                    upper = {}
                    opposite = catalog:EnumValue/attributes:property
                }
                
            }
        }
        Class {
            name = EnumValue
            attributes = {
                Attribute {
                    name = value
                    type = primitive:Integer
                }
                Attribute {
                    name = labels
                    type = catalog:Label
                    isComposite = true
                    lower = 0
                    upper = {}
                    opposite = catalog:Label/attributes:enumValue
                }
                Attribute {
                    name = property
                    type = catalog:Property
                    opposite = catalog:Property/attributes:enumValues                                
                }
            }
        }

        Class {
            name = Label
            attributes = {
                /**
                 * IETF language tag. See http://en.wikipedia.org/wiki/IETF_language_tag.
                 * When not specified (null), denotes a default value applicable for all languages.
                 */
                Attribute {
                    name = language
                    lower = 0
                    type = primitive:String
                }
                Attribute {
                    name = label
                    type = primitive:String
                }
                Attribute {
                    name = property
                    type = catalog:Property
                    lower = 0
                    opposite = catalog:Property/attributes:labels
                }
                Attribute {
                    name = enumValue
                    type = catalog:EnumValue
                    lower = 0
                    opposite = catalog:EnumValue/attributes:labels                    
                }
            }
        }
        /**
         * Represents an entity (e.g. Distributor) where a catalog can be 
         * published to.
         */
        Class {
            name = PropertyValue
            attributes = {
                Attribute {
                    name = property
                    type = catalog:Property
                }
                /**
                 * IETF language tag. See http://en.wikipedia.org/wiki/IETF_language_tag.
                 * When not specified (null), denotes a default value applicable for all languages.
                 */
                Attribute {
                    name = language
                    lower = 0
                    type = primitive:String
                }
                /**
                 * Used when property.type == String or property.type == FormattedText  
                 */
                Attribute {
                    name = stringValue
                    type = primitive:String
                    lower = 0
                }
                /**
                 * Used when property.type == Integer
                 */
                Attribute {
                    name = integerValue
                    type = primitive:Integer
                    lower = 0
                }
                /**
                 * Used when property.type == Enum
                 */
                Attribute {
                    name = enumValue
                    type = primitive:Integer
                    lower = 0
                }
                /**
                 * Used when property.type == Real or any SI unit 
                 */
                Attribute {
                    name = realValue
                    type = primitive:Real
                    lower = 0
                }
                /**
                 * Used when property.type == Boolean
                 */
                Attribute {
                    name = booleanValue
                    type = primitive:Boolean
                    lower = 0
                }
                /**
                 * Used when property.type == Money
                 */
                Attribute {
                    name = moneyValue
                    type = primitive:Money
                    lower = 0
                }
                /**
                 * Used when property.type == Money.
                 * Stored as ISO 4217 currency code.
                 * See http://en.wikipedia.org/wiki/ISO_4217.
                 */
                Attribute {
                    name = moneyCurrency
                    type = primitive:String
                    lower = 0
                }
                
                /**
                 * Used when property.type == Media
                 */
                Attribute {
                    name = mediaValue
                    type = primitive:Blob
                    lower = 0
                }
                /**
                 * Used when property.type == Media.
                 * Stored as ISO 4217 currency code.
                 * See http://en.wikipedia.org/wiki/Mime_type.
                 */
                Attribute {
                    name = mimeType
                    type = primitive:String
                    lower = 0
                }
                
                Attribute {
                    name = item
                    type = catalog:Item
                    lower = 0
                    opposite = catalog:Item/attributes:propertyValues
                }
            }
        }
        Class {
            name = Template
            attributes = {
                Attribute {
                    name = name
                    type = primitive:String
                }
                Attribute {
                    name = language
                    type = primitive:String
                    lower = 0
                }
                Attribute {
                    name = templateXml
                    type = primitive:String
                }
                Attribute {
                    name = item
                    type = catalog:Item
                    lower = 0
                    opposite = catalog:Item/attributes:templates
                }
            }
        }
         /**
         * See http://en.wikipedia.org/wiki/International_System_of_Units
         * and http://en.wikipedia.org/wiki/SI_derived_unit
         */
        Enumeration {
            name = PropertyType
            literals = {
                /**
                 * Stored in field PropertyValue.stringValue.
                 */
                Literal {
                    name = String
                }
                /**
                 * Stored in field PropertyValue.integerValue.
                 */
                Literal {
                    name = Integer
                }
                /**
                 * Stored in field PropertyValue.realValue.
                 */
                Literal {
                    name = Real
                }
                /**
                 * Stored in field PropertyValue.booleanValue.
                 */
                Literal {
                    name = Boolean
                }
                /**
                 * Stored in field PropertyValue.moneyValue.
                 */
                Literal {
                    name = Money
                }
                /**
                 * Stored in field PropertyValue.enumValue.
                 */
                Literal {
                    name = Enum
                }
                /**
                 * Stored in field PropertyValue.mediaValue.
                 */
                Literal {
                    name = Media
                }
                /**
                 * Stored in field PropertyValue.stringValue.
                 * Html subset.
                 */
                Literal {
                    name = FormattedText
                }
                
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in metres.
                 */
                Literal {
                    name = Length
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in kilograms.
                 */
                Literal {
                    name = Mass
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in seconds.
                 */
                Literal {
                    name = Time
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in amperes.
                 */
                Literal {
                    name = ElectricCurrent
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in kelvin.
                 */
                Literal {
                    name = Temperature
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in candela.
                 */
                Literal {
                    name = LuminousIntensity
                }
                /**
                 * SI base unit.
                 * Stored in field PropertyValue.realValue. 
                 * Units stored in mole.
                 */
                Literal {
                    name = AmountOfSubstance
                }
                
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in hertz.
                 */
                Literal {
                    name = Frequency
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in rad.
                 */
                Literal {
                    name = Angle
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in joule.
                 */
                Literal {
                    name = Energy
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in watts.
                 */
                Literal {
                    name = Power
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in volt.
                 */
                Literal {
                    name = Voltage
                }
                
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in square metre.
                 */
                Literal {
                    name = Area
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in cubic metre.
                 */
                Literal {
                    name = Volume
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in metre per second.
                 */
                Literal {
                    name = Velocity
                }
                /**
                 * SI derived unit.
                 * Stored in field PropertyValue.realValue.
                 * Units stored in metre per square second.
                 */
                Literal {
                    name = Acceleration
                }
            }
        }
    }
    operations = {
        Operation {
            name = findProductsByProductGroup
            type = catalog:Product
            lower = 0
            upper = {}
            parameters = {
                Parameter {
                    name = catalog
                    type = catalog:Catalog
                }
            }
        }
        @comment "Returns the children of the given ProductGroup, if null is
                  passed the topLevelProductGroups of the current taxonomy are
                  returned."
        Operation {
            name = findAllProductGroupChildren
            type = catalog:ProductGroup
            lower = 0
            upper = {}
            parameters = {
                Parameter {
                    name = shop
                    type = shop:Shop
                }
                Parameter {
                    name = parent
                    type = catalog:ProductGroup
                }
            }
        }
    }
}