root /architecture

import Metaphor.PSM.DomainToRdbms.ColumnTemplates
import Metaphor.PSM.DomainToRdbms.DomainToRdbms
import Metaphor.PSM.JavaEE.Persistence
import Metaphor.PSM.JavaEEArchitectureJpaEjbLift
import Metaphor.PSM.JavaEEAspects.Crud
import Metaphor.PSM.JavaEEAspects.Query
import Metaphor.PSM.Rdbms.Column


path domain = /packages:AgileXS/packages:Domain/packages
path catalog = /packages:AgileXS/packages:Domain/packages:Catalog/types

JavaEEArchitectureJpaEjbLift {
    name = CatalogXSArchitecture
    commonModule = /modules:agilexs.catalogxs.common
    providerPackage = /packages:AgileXS
    productPackage = /packages:AgileXS/packages:CatalogXS
    databaseVendor = postgresql
    jpaVendor = EclipseLink
    generateBaseClasses = true
    aspects = {
/*        Scala {
            name = ScalaAspect
            participants = {
                /modules:agilexs.catalogxs.presentation
            }
        }
*/
        Crud {
            name = CrudForAll
            participants = {
                catalog:Catalog
                catalog:Product
                catalog:ProductGroup
                catalog:Property                
                catalog:CatalogView
/*                /packages:AgileXS/packages:Domain/packages:Catalog/types:ProductRelation*/
            }
            
        }
        Query {
            name = "Query for all"
            methodNamePrefix = findAll
            participants = { 
                catalog:Catalog
                catalog:Product
                catalog:ProductGroup
                catalog:Promotion
                catalog:CatalogView
            }
            paging = false
        }
        Query {
            name = "Query for all non paged"
            methodNamePrefix = findAllNonPaged
            participants = { 
                catalog:Label
            }
        }
        Query {
            name = "Query for all products by ProductGroup"
            methodNamePrefix = findAllByProductGroup
            //filter = domain:Query/types:ProductGroupQuery
            filter = catalog:ProductGroup
            participants = { 
                catalog:Product
            }
            paging = true
        }
        Query {
            name = "Query for all ProductGroup children"
            methodNamePrefix = findAllChildren
            filter = domain:Query/types:ProductGroupQuery
            participants = { 
                catalog:ProductGroup
            }
            paging = true
        }
        Query {
            name = "Query for all Properties for a ProductGroup"
            methodNamePrefix = findAll
            filter = domain:Query/types:PropertyQuery
            participants = { 
                catalog:Property
            }
            paging = true
        }
        Query {
            name = "Query for all groups within a "
            methodNamePrefix = findAll
            filter = domain:Query/types:PropertyQuery
            participants = { 
                catalog:Property
            }
            paging = true
        }
    }
    persistence = {
        DomainToRdbms {
            name = DomainToRdbms
            excluded = {
                domain:Query
            }
        }
    }
}